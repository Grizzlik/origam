using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;
using System.Xml.Xsl;
using Mvp.Xml.Common.Xsl;
using Mvp.Xml.Exslt;
using Origam.DA.Service;
using Origam.Gui.Win;
using Origam.Schema;
using Origam.Schema.GuiModel;
using Origam.Schema.MenuModel;
using Origam.Workbench.Services;

namespace Origam.DocGenerator
{
    class DocCreate
    {
        private string Dataout { get; set; }
        private MultiXmlTextWriter Xmlwriter { get; set; }
        private IDocumentationService documentation;
        private MenuSchemaItemProvider menuprovider = new MenuSchemaItemProvider();
        private readonly FilePersistenceProvider persprovider;
        private readonly string Xlst;
        private readonly MemoryStream mstream ;
        private readonly string Extension;

        public DocCreate(string dataout,string xlst, string extension, FileStorageDocumentationService documentation1,FilePersistenceProvider persprovider)
        {
            Xlst = xlst;
            this.Dataout = dataout;
            documentation = documentation1;
            menuprovider.PersistenceProvider = persprovider;
            this.persprovider = persprovider;
            Extension = extension;
            mstream = new MemoryStream();
            CreateWriter();
        }

        private void CreateWriter()
        {
            Xmlwriter = new MultiXmlTextWriter(mstream, Encoding.UTF8)
            {
                Formatting = Formatting.Indented
            };
            Xmlwriter.WriteStartDocument();
            Xmlwriter.WriteComment("This file is generated by the program.(" + DateTime.Now + ")");
        }

        private void MakeXml( ControlSetItem control, FormControlSet formItem, DataSet dataset,string dataMember)
        {
            string caption = "";
            string gridCaption = "";
            string bindingMember = "";
            string panelTitle = "";
            int tabIndex = 0;
            string section = "";

            foreach (PropertyValueItem property in control.ChildItemsByType(PropertyValueItem.ItemTypeConst))
            {
                if (property.ControlPropertyItem.Name == "TabIndex")
                {
                    tabIndex = property.IntValue;
                }

                if (property.ControlPropertyItem.Name == "Caption")
                {
                    caption = property.Value;
                }

                if (property.ControlPropertyItem.Name == "GridColumnCaption")
                {
                    gridCaption = property.Value;
                }

                if (property.ControlPropertyItem.Name == "PanelTitle")
                {
                    panelTitle = property.Value;
                }

                if (control.ControlItem.IsComplexType && property.ControlPropertyItem.Name == "DataMember")
                {
                    dataMember = property.Value;
                }
            }

            caption = (gridCaption == "" | gridCaption == null) ? caption : gridCaption;
            foreach (PropertyBindingInfo bindItem in control.ChildItemsByType(PropertyBindingInfo.ItemTypeConst))
            {
                bindingMember = bindItem.Value;
            }

            if (bindingMember != "")
            {
                DataTable table = dataset.Tables[FormGenerator.FindTableByDataMember(dataset, dataMember)];

                if (!table.Columns.Contains(bindingMember)) throw new Exception("Field '" + bindingMember + "' not found in a data structure for the form '" + control.RootItem.Path + "'");

                if (string.IsNullOrEmpty(caption))
                {
                    caption = table.Columns[bindingMember].Caption;
                }
                Guid id = (Guid)table.Columns[bindingMember].ExtendedProperties["Id"];
                WriteStartElement("Field", caption);
                string docc = documentation.GetDocumentation(id, DocumentationType.USER_LONG_HELP);
                WriteElement("description", docc);
            }

            ArrayList sortedControls;
            if (control.ControlItem.IsComplexType)
            {
                string doc = documentation.GetDocumentation(control.ControlItem.PanelControlSet.Id, DocumentationType.USER_LONG_HELP);

                if (panelTitle!= "")
                {
                    section = panelTitle;
                }
                else
                {
                    section = "Panel";
                }
                if (string.IsNullOrEmpty(section))
                {
                    section = "Panel";
                }
                WriteStartElement("Section", section);
                WriteElement("description", doc);
                sortedControls = control.ControlItem.PanelControlSet.ChildItems[0].ChildItemsByType(ControlSetItem.ItemTypeConst);
            }
            else
            {
                sortedControls = control.ChildItemsByType(ControlSetItem.ItemTypeConst);
            }

            sortedControls.Sort(new ControlSetItemComparer());
            foreach (ControlSetItem subControl in sortedControls)
            {
                MakeXml(subControl,formItem,dataset, dataMember);
            }
            if (bindingMember != "")
            {
                WriteEndElement();
            }
            if (section != "")
            {
                WriteEndElement();
            }
        }

        public Boolean Run()
        {
            if(!string.IsNullOrEmpty(Xlst))
            {
                MvpXslTransform processor = new MvpXslTransform(false);
                try
                { 
                    processor.Load(Xlst);
                } catch (XsltException)
                {
                    //asi potreba nekam neco zapsat !?
                    return false;
                }
            }
            List<AbstractSchemaItem> menulist = menuprovider.ChildItems.ToList();
            menulist.Sort();
            WriteStartElement("Menu");
            CreateXml(menulist[0]);
            WriteEndElement();
            CloseXml();
            //SaveSchemaXml();
            SaveXlts();
            return true;
        }

        private void SaveSchemaXml()
        {
            //for test only
            FileStream file = new FileStream(Dataout + "\\schemaXml." + Extension,  FileMode.Create, FileAccess.Write);
            mstream.WriteTo(file);
            file.Close();
            mstream.Close();
        }

        private void SaveXlts()
        {
            mstream.Seek(0, SeekOrigin.Begin);
            XPathDocument doc = new XPathDocument(mstream);
            XslTransform xslt = new XslTransform();
            xslt.Load(Xlst);
            MultiXmlTextWriter multiWriter =
                new MultiXmlTextWriter(Dataout + "\\schemaMD." + Extension, Encoding.UTF8);
            multiWriter.Formatting = Formatting.Indented;
            xslt.Transform(doc, null, multiWriter);
            //MvpXslTransform processor = new MvpXslTransform(true);
            //processor.Load(Xlst);
            //processor.MultiOutput = true;
            //mstream.Seek(0,SeekOrigin.Begin);
            //processor.Transform(new XmlInput(mstream), null, new XmlOutput(Dataout + "\\schemaMD." + Extension));
        }

        private void CreateXml(AbstractSchemaItem menuSublist)
        {
            foreach (AbstractSchemaItem menuitem in menuSublist.ChildItems)
            {
                WriteStartElement("Menuitem", menuitem.NodeText);
                string doc = documentation.GetDocumentation(menuitem.Id, DocumentationType.USER_LONG_HELP);
                WriteElement("documentation", doc);
                if (menuitem is FormReferenceMenuItem formItem)
                {
                    FormControlSet form = formItem.Screen;
                    DataSet dataset = new DatasetGenerator(false).CreateDataSet(form.DataStructure);
                    MakeXml(form.ChildItems[0] as ControlSetItem, form, dataset,null);
                }
                WriteEndElement();
                CreateXml(menuitem);
            }
        }

        private void WriteStartElement(string v)
        {
            Xmlwriter.WriteStartElement(v);
        }

        private void WriteStartElement(string v,string title)
        {
            Xmlwriter.WriteStartElement(v);
            Xmlwriter.WriteAttributeString("DisplayName", title);
        }

        private void WriteElement(string caption,string description)
        {
            if(!string.IsNullOrEmpty(description))
            { 
                Xmlwriter.WriteElementString(caption, description);
            }
        }

        private void WriteEndElement()
        {
            Xmlwriter.WriteEndElement();
        }

        private void CloseXml()
        {
            Xmlwriter.WriteEndDocument();
            Xmlwriter.Flush();
        }
    }
}

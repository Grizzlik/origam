import * as React from "react";
import { AutoSizer } from "react-virtualized";
import { GridEditorMounter } from "./cells/GridEditorMounter";
import { StringGridEditor } from "./cells/string/GridEditor";
import { LookupResolverProvider } from "./DataLoadingStrategy/LookupResolverProvider";
import { DataTableSelectors } from "./DataTable/DataTableSelectors";
import { DataTableState, DataTableField } from "./DataTable/DataTableState";
import { CellScrolling } from "./Grid/CellScrolling";
import { columnHeaderRenderer } from "./Grid/ColumnHeaderRenderer";
import { GridActions } from "./Grid/GridActions";
import { createGridCellRenderer } from "./Grid/GridCellRenderer";
import { ColumnHeaders, GridComponent } from "./Grid/GridComponent";
import { GridCursorComponent } from "./Grid/GridCursorComponent";
import { GridCursorView } from "./Grid/GridCursorView";
import { GridInteractionActions } from "./Grid/GridInteractionActions";
import { GridInteractionSelectors } from "./Grid/GridInteractionSelectors";
import { GridInteractionState } from "./Grid/GridInteractionState";
import { GridSelectors } from "./Grid/GridSelectors";
import { GridState } from "./Grid/GridState";
import { GridView } from "./Grid/GridView";
import { GridSetup } from "./GridPanel/adapters/GridSetup";
import { EventObserver, ISubscriber } from "./utils/events";
import { DataLoadingStrategyActions } from "./DataLoadingStrategy/DataLoadingStrategyActions";
import { DataLoadingStrategySelectors } from "./DataLoadingStrategy/DataLoadingStrategySelectors";
import { DataLoadingStrategyState } from "./DataLoadingStrategy/DataLoadingStrategyState";
import { DataTableActions } from "./DataTable/DataTableActions";
import { DataLoader } from "./DataLoadingStrategy/DataLoader";
import { GridOrderingSelectors } from "./GridOrdering/GridOrderingSelectors";
import { GridOrderingState } from "./GridOrdering/GridOrderingState";
import { GridOrderingActions } from "./GridOrdering/GridOrderingActions";
import { GridOutlineState } from "./GridOutline/GridOutlineState";
import { GridOutlineSelectors } from "./GridOutline/GridOutlineSelectors";
import { GridOutlineActions } from "./GridOutline/GridOutlineActions";
import { GridTopology } from "./GridPanel/adapters/GridTopology";
import { Observer, observer } from "mobx-react";
import { GridToolbarView } from "./GridPanel/GridToolbarView";
import {
  IFieldType,
  IDataTableField,
  IDataTableFieldStruct,
  ILookupResolverProvider,
  IDataTableActions,
  IDataTableSelectors
} from "./DataTable/types";
import { Splitter } from "./uiParts/Splitter/SplitterComponent";
import {
  IGridSetup,
  IGridTopology,
  IGridActions,
  IGridSelectors,
  IGridInteractionActions
} from "./Grid/types";
import { IDataLoader } from "./DataLoadingStrategy/types";
import {
  IGridOrderingSelectors,
  IGridOrderingActions
} from "./GridOrdering/types";
import { IGridOutlineSelectors } from "./GridOutline/types";

const tableFields = [
  new DataTableField({
    id: "name",
    label: "Name",
    type: IFieldType.string,
    dataIndex: 0,
    isLookedUp: false
  }),
  new DataTableField({
    id: "birth_date",
    label: "Birth date",
    type: IFieldType.date,
    dataIndex: 1,
    isLookedUp: false
  }),
  new DataTableField({
    id: "likes_platypuses",
    label: "Likes platypuses?",
    type: IFieldType.boolean,
    dataIndex: 2,
    isLookedUp: false
  }),
  new DataTableField({
    id: "city_id",
    label: "Lives in",
    type: IFieldType.string,
    dataIndex: 3,
    isLookedUp: true,
    lookupResultFieldId: "name",
    lookupResultTableId: "city"
  }),
  new DataTableField({
    id: "favorite_color",
    label: "Favorite color",
    type: IFieldType.color,
    dataIndex: 4,
    isLookedUp: false
  })
];

class GridOrderingProvider {
  public get state() {
    return new GridOrderingState();
  }

  public get selectors() {
    return new GridOrderingSelectors(this.state);
  }

  public get actions() {
    return new GridOrderingActions(this.state, this.selectors);
  }
}

class GridOutlineProvider {
  get state() {
    return new GridOutlineState();
  }

  get selectors() {
    return new GridOutlineSelectors(this.state);
  }

  get actions() {
    return new GridOutlineActions(this.state, this.selectors);
  }
}

class DataTableProvider {
  constructor(
    public nextProvider: {
      fields: IDataTableFieldStruct[];
      lookupResolverProvider: ILookupResolverProvider;
      dataTableName: string;
    }
  ) {}

  get state() {
    const state = new DataTableState();
    state.fields = this.fields;
    return state;
  }

  get selectors() {
    return new DataTableSelectors(
      this.state,
      this.lookupResolverProvider,
      this.dataTableName
    );
  }

  get actions() {
    return new DataTableActions(this.state, this.selectors);
  }

  get fields() {
    return this.nextProvider.fields;
  }

  get dataTableName() {
    return this.nextProvider.dataTableName;
  }

  get lookupResolverProvider() {
    return this.nextProvider.lookupResolverProvider;
  }
}

class GridProvider {
  constructor(
    public nextProvider: {
      gridSetupProvider: { gridSetup: IGridSetup };
      gridTopologyProvider: { gridTopology: IGridTopology };
    }
  ) {}

  public get state() {
    return new GridState();
  }

  public get selectors() {
    const selectors = new GridSelectors(
      this.state,
      this.gridSetupProvider,
      this.gridTopologyProvider
    );
    return selectors;
  }

  public get actions() {
    const actions = new GridActions(this.state, this.selectors);
    return actions;
  }

  public get view() {
    return new GridView(this.selectors, this.actions);
  }

  public get gridSetupProvider() {
    return this.nextProvider.gridSetupProvider;
  }

  public get gridTopologyProvider() {
    return this.nextProvider.gridTopologyProvider;
  }
}

class GridInteractionProvider {
  constructor(
    public nextProvider: {
      onStartGrid(fn: ISubscriber): void;
      onStopGrid(fn: ISubscriber): void;
      gridActions: IGridActions;
      gridSelectors: IGridSelectors;
      dataTableActions: IDataTableActions;
      dataTableSelectors: IDataTableSelectors;
      gridSetupProvider: { gridSetup: IGridSetup };
      gridTopologyProvider: { gridTopology: IGridTopology };
    }
  ) {}

  public get state() {
    return new GridInteractionState();
  }

  public get selectors() {
    return new GridInteractionSelectors(this.state, this.gridTopologyProvider);
  }

  public get actions() {
    const actions = new GridInteractionActions(
      this.state,
      this.selectors,
      this.gridViewActions
    );
    this.onStartGrid(() => actions.start());
    this.onStopGrid(() => actions.stop());
    return actions;
  }

  public get gridCursorView() {
    return new GridCursorView(
      this.selectors,
      this.gridViewSelectors,
      this.dataTableSelectors,
      this.dataTableActions,
      this.gridSetupProvider,
      this.gridTopologyProvider
    );
  }

  public get onStartGrid() {
    return this.nextProvider.onStartGrid;
  }
  public get onStopGrid() {
    return this.nextProvider.onStopGrid;
  }
  public get gridViewActions() {
    return this.nextProvider.gridActions;
  }
  public get gridViewSelectors() {
    return this.nextProvider.gridSelectors;
  }
  public get dataTableSelectors() {
    return this.nextProvider.dataTableSelectors;
  }
  public get dataTableActions() {
    return this.nextProvider.dataTableActions;
  }
  public get gridTopologyProvider() {
    return this.nextProvider.gridTopologyProvider;
  }
  public get gridSetupProvider() {
    return this.nextProvider.gridSetupProvider;
  }
}

class DataLoadingStrategyProvider {
  constructor(
    public nextProvider: {
      onStartGrid(fn: ISubscriber): void;
      onStopGrid(fn: ISubscriber): void;
      gridSelectors: IGridSelectors;
      gridActions: IGridActions;
      dataTableSelectors: IDataTableSelectors;
      dataTableActions: IDataTableActions;
      dataLoader: IDataLoader;
      gridOrderingSelectors: IGridOrderingSelectors;
      gridOrderingActions: IGridOrderingActions;
      gridOutlineSelectors: IGridOutlineSelectors;
      gridInteractionActions: IGridInteractionActions;
    }
  ) {}

  public get state() {
    return new DataLoadingStrategyState();
  }

  public get selectors() {
    return new DataLoadingStrategySelectors(
      this.state,
      this.gridSelectors,
      this.dataTableSelectors
    );
  }

  public get actions() {
    const actions = new DataLoadingStrategyActions(
      this.state,
      this.selectors,
      this.dataTableActions,
      this.dataTableSelectors,
      this.dataLoader,
      this.gridOrderingSelectors,
      this.gridOrderingActions,
      this.gridOutlineSelectors,
      this.gridInteractionActions,
      this.gridSelectors,
      this.gridActions
    );
    this.onStartGrid(() => actions.start());
    this.onStopGrid(() => actions.stop());
    return actions;
  }

  public get dataTableActions() {
    return this.nextProvider.dataTableActions;
  }
  public get dataTableSelectors() {
    return this.nextProvider.dataTableSelectors;
  }
  public get dataLoader() {
    return this.nextProvider.dataLoader;
  }
  public get gridOrderingSelectors() {
    return this.nextProvider.gridOrderingSelectors;
  }
  public get gridOrderingActions() {
    return this.nextProvider.gridOrderingActions;
  }
  public get gridOutlineSelectors() {
    return this.nextProvider.gridOutlineSelectors;
  }
  public get gridInteractionActions() {
    return this.nextProvider.gridInteractionActions;
  }
  public get gridSelectors() {
    return this.nextProvider.gridSelectors;
  }
  public get gridActions() {
    return this.nextProvider.gridActions;
  }
  public get onStartGrid() {
    return this.nextProvider.onStartGrid;
  }
  public get onStopGrid() {
    return this.nextProvider.onStopGrid;
  }
}

// prettier-ignore
class GridPaneProvider {
  constructor(public fields: IDataTableFieldStruct[], public dataTableName: string ) {

  }

  public get lookupResolverProvider() {
    return new LookupResolverProvider({
      get dataLoader() {
        return this.dataLoader;
      }
    });
  }


  public gridOrderingProvider = new GridOrderingProvider();
  public get gridOrderingActions() { return this.gridOrderingProvider.actions }
  public get gridOrderingSelectors() { return this.gridOrderingProvider.selectors }
  public get gridOrderingState() { return this.gridOrderingProvider.state }

  public gridOutlineProvider = new GridOutlineProvider();
  public get gridOutlineActions() { return this.gridOutlineProvider.actions }
  public get gridOutlineSelectors() { return this.gridOutlineProvider.selectors }
  public get gridOutlineState() { return this.gridOutlineProvider.state }

  public get dataLoader() { return new DataLoader(this.dataTableName) }
  
  public dataTableProvider = new DataTableProvider(this);
  public get dataTableState() { return this.dataTableProvider.state }
  public get dataTableSelectors() { return this.dataTableProvider.selectors }
  public get dataTableActions() { return this.dataTableProvider.actions }

  public onStartGrid = EventObserver();
  public onStopGrid = EventObserver();
  

  public gridProvider = new GridProvider(this);
  public get gridState() { return this.gridProvider.state }
  public get gridSelectors() { return this.gridProvider.selectors } 
  public get gridActions() { return this.gridProvider.actions }
  public get gridView() { return this.gridProvider.view }
  
  public gridInteractionProvider = new GridInteractionProvider(this);
  public get gridInteractionState() { return this.gridInteractionProvider.state }
  public get gridInteractionSelectors() { return this.gridInteractionProvider.selectors }
  public get gridInteractionActions() { return this.gridInteractionProvider.actions }
  public get gridCursorView() { return this.gridInteractionProvider.gridCursorView }

  get cellScrolling() {
    const cellScrolling = new CellScrolling(
      this.gridSelectors,
      this.gridActions,
      this.gridInteractionSelectors,
      this,
      this
    );
    this.onStartGrid(() => cellScrolling.start());
    this.onStopGrid(() => cellScrolling.stop());
    return cellScrolling;
  }


  public dataLoadingStrategyProvider = new DataLoadingStrategyProvider(this);
  public get dataLoadingStrategyState() { return this.dataLoadingStrategyProvider.state }
  public get dataLoadingStrategySelectors() { return this.dataLoadingStrategyProvider.selectors }
  public get dataLoadingStrategyActions() { return this.dataLoadingStrategyProvider.actions }

  
  public get gridToolbarView() {
    return new GridToolbarView(
      this.gridInteractionSelectors,
      this.gridSelectors,
      this.dataTableSelectors,
      this.dataTableActions,
      this.gridInteractionActions,
      this
    );
  }

  public gridTopology: IGridTopology;
  public gridSetup: IGridSetup;

  public get configuredGridSetup() {
    return new GridSetup(
      this.gridInteractionSelectors, 
      this.dataTableSelectors
    );
  }
  
  public get configuredGridTopology() {
    return new GridTopology(
      this.dataTableSelectors
    );
  }
    /*

  onStartGrid.trigger();
  dataLoadingStrategyActions.requestLoadFresh();
  */
  // gridOrderingActions.setOrdering('name', 'asc');
  
  
}

@observer
class GridPane extends React.Component {
  constructor(props: any) {
    super(props);
    this.gridPaneProvider = new GridPaneProvider(tableFields, "person");
  }

  public gridPaneProvider: GridPaneProvider;

  public componentDidMount() {
    this.gridPaneProvider.onStartGrid.trigger();
  }

  public render() {
    this.gridPaneProvider.injectGridSetup();
    const {
      gridToolbarView,
      gridView,
      gridSetup,
      gridTopology,
      gridCursorView,
      gridInteractionActions,
      onConfigureGridSetup,
      onConfigureGridTopology
    } = this.gridPaneProvider;
    onConfigureGridSetup.trigger(gridSetup);
    onConfigureGridTopology.trigger(gridTopology);
    return (
      <AutoSizer>
        {({ width: paneWidth, height: paneHeight }) => (
          <Observer>
            {() => (
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  width: paneWidth,
                  height: paneHeight,
                  overflow: "hidden"
                }}
              >
                <div
                  style={{
                    display: "flex",
                    flexDirection: "row"
                  }}
                >
                  <button onClick={gridToolbarView.handleAddRecordClick}>
                    Add
                  </button>
                  <button onClick={gridToolbarView.handleRemoveRecordClick}>
                    Remove
                  </button>
                </div>
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column"
                  }}
                >
                  <ColumnHeaders
                    view={gridView}
                    columnHeaderRenderer={columnHeaderRenderer}
                  />
                </div>
                <div
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    height: "100%",
                    flex: "1 1"
                  }}
                >
                  <AutoSizer>
                    {({ width, height }) => (
                      <Observer>
                        {() => (
                          <GridComponent
                            view={gridView}
                            gridSetup={gridSetup}
                            gridTopology={gridTopology}
                            width={width}
                            height={height}
                            overlayElements={
                              <GridCursorComponent
                                view={gridCursorView}
                                cursorContent={
                                  <GridEditorMounter
                                    cursorView={gridCursorView}
                                  >
                                    {gridCursorView.isCellEditing && (
                                      <StringGridEditor
                                        editingRecordId={
                                          gridCursorView.editingRowId!
                                        }
                                        editingFieldId={
                                          gridCursorView.editingColumnId!
                                        }
                                        value={
                                          gridCursorView.editingOriginalCellValue
                                        }
                                        onKeyDown={
                                          gridInteractionActions.handleDumbEditorKeyDown
                                        }
                                        onDataCommit={
                                          gridCursorView.handleDataCommit
                                        }
                                      />
                                    )}
                                  </GridEditorMounter>
                                }
                              />
                            }
                            cellRenderer={createGridCellRenderer({
                              gridSetup,
                              onClick(event, cellRect, cellInfo) {
                                gridInteractionActions.handleGridCellClick(
                                  event,
                                  {
                                    rowId: gridTopology.getRowIdByIndex(
                                      cellInfo.rowIndex
                                    )!,
                                    columnId: gridTopology.getColumnIdByIndex(
                                      cellInfo.columnIndex
                                    )!
                                  }
                                );
                              }
                            })}
                            onKeyDown={gridInteractionActions.handleGridKeyDown}
                            onOutsideClick={
                              gridInteractionActions.handleGridOutsideClick
                            }
                            onNoCellClick={
                              gridInteractionActions.handleGridNoCellClick
                            }
                          />
                        )}
                      </Observer>
                    )}
                  </AutoSizer>
                </div>
              </div>
            )}
          </Observer>
        )}
      </AutoSizer>
    );
  }
}

@observer
class App extends React.Component {
  public render() {
    return (
      <AutoSizer>
        {({ width, height }) => (
          <Observer>
            {() => (
              <Splitter width={width} height={height} vertical={false}>
                <GridPane />
                <div>Hello</div>
              </Splitter>
            )}
          </Observer>
        )}
      </AutoSizer>
    );
  }
}

export default App;
/*
class Splitter extends React.Component<{ width: number; height: number; vertical: boolean; }> {
  public render() {
    return (
      <div
        style={{
          display: "flex",
          width: this.props.width,
          height: this.props.height,
          flexDirection: "row"
        }}
      >
        {React.Children.map(this.props.children, (child, index) => (
          <div key={index} style={{flexGrow: 1}}>{child}</div>
        ))}
      </div>
    );
  }
}

*/

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Origam.Gui {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsOrigamGui : DataSet {
        
        private ControlSetItemDataTable tableControlSetItem;
        
        private PropertyValueDataTable tablePropertyValue;
        
        private ControlSetDataTable tableControlSet;
        
        private ControlDataTable tableControl;
        
        private ItemPropertyDataTable tableItemProperty;
        
        private ControlPropertyDataTable tableControlProperty;
        
        private DataRelation relationControlSetControlSetItem;
        
        private DataRelation relationControlControlSetItem;
        
        private DataRelation relationControlSetItemItemProperty;
        
        private DataRelation relationControlControlProperty;
        
        private DataRelation relationControlPropertyPropertyValue;
        
        private DataRelation relationItemPropertyPropertyValue;
        
        public dsOrigamGui() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsOrigamGui(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ControlSetItem"] != null)) {
                    this.Tables.Add(new ControlSetItemDataTable(ds.Tables["ControlSetItem"]));
                }
                if ((ds.Tables["PropertyValue"] != null)) {
                    this.Tables.Add(new PropertyValueDataTable(ds.Tables["PropertyValue"]));
                }
                if ((ds.Tables["ControlSet"] != null)) {
                    this.Tables.Add(new ControlSetDataTable(ds.Tables["ControlSet"]));
                }
                if ((ds.Tables["Control"] != null)) {
                    this.Tables.Add(new ControlDataTable(ds.Tables["Control"]));
                }
                if ((ds.Tables["ItemProperty"] != null)) {
                    this.Tables.Add(new ItemPropertyDataTable(ds.Tables["ItemProperty"]));
                }
                if ((ds.Tables["ControlProperty"] != null)) {
                    this.Tables.Add(new ControlPropertyDataTable(ds.Tables["ControlProperty"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlSetItemDataTable ControlSetItem {
            get {
                return this.tableControlSetItem;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyValueDataTable PropertyValue {
            get {
                return this.tablePropertyValue;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlSetDataTable ControlSet {
            get {
                return this.tableControlSet;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlDataTable Control {
            get {
                return this.tableControl;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItemPropertyDataTable ItemProperty {
            get {
                return this.tableItemProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlPropertyDataTable ControlProperty {
            get {
                return this.tableControlProperty;
            }
        }
        
        public override DataSet Clone() {
            dsOrigamGui cln = ((dsOrigamGui)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ControlSetItem"] != null)) {
                this.Tables.Add(new ControlSetItemDataTable(ds.Tables["ControlSetItem"]));
            }
            if ((ds.Tables["PropertyValue"] != null)) {
                this.Tables.Add(new PropertyValueDataTable(ds.Tables["PropertyValue"]));
            }
            if ((ds.Tables["ControlSet"] != null)) {
                this.Tables.Add(new ControlSetDataTable(ds.Tables["ControlSet"]));
            }
            if ((ds.Tables["Control"] != null)) {
                this.Tables.Add(new ControlDataTable(ds.Tables["Control"]));
            }
            if ((ds.Tables["ItemProperty"] != null)) {
                this.Tables.Add(new ItemPropertyDataTable(ds.Tables["ItemProperty"]));
            }
            if ((ds.Tables["ControlProperty"] != null)) {
                this.Tables.Add(new ControlPropertyDataTable(ds.Tables["ControlProperty"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableControlSetItem = ((ControlSetItemDataTable)(this.Tables["ControlSetItem"]));
            if ((this.tableControlSetItem != null)) {
                this.tableControlSetItem.InitVars();
            }
            this.tablePropertyValue = ((PropertyValueDataTable)(this.Tables["PropertyValue"]));
            if ((this.tablePropertyValue != null)) {
                this.tablePropertyValue.InitVars();
            }
            this.tableControlSet = ((ControlSetDataTable)(this.Tables["ControlSet"]));
            if ((this.tableControlSet != null)) {
                this.tableControlSet.InitVars();
            }
            this.tableControl = ((ControlDataTable)(this.Tables["Control"]));
            if ((this.tableControl != null)) {
                this.tableControl.InitVars();
            }
            this.tableItemProperty = ((ItemPropertyDataTable)(this.Tables["ItemProperty"]));
            if ((this.tableItemProperty != null)) {
                this.tableItemProperty.InitVars();
            }
            this.tableControlProperty = ((ControlPropertyDataTable)(this.Tables["ControlProperty"]));
            if ((this.tableControlProperty != null)) {
                this.tableControlProperty.InitVars();
            }
            this.relationControlSetControlSetItem = this.Relations["ControlSetControlSetItem"];
            this.relationControlControlSetItem = this.Relations["ControlControlSetItem"];
            this.relationControlSetItemItemProperty = this.Relations["ControlSetItemItemProperty"];
            this.relationControlControlProperty = this.Relations["ControlControlProperty"];
            this.relationControlPropertyPropertyValue = this.Relations["ControlPropertyPropertyValue"];
            this.relationItemPropertyPropertyValue = this.Relations["ItemPropertyPropertyValue"];
        }
        
        private void InitClass() {
            this.DataSetName = "dsOrigamGui";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsOrigamGui.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableControlSetItem = new ControlSetItemDataTable();
            this.Tables.Add(this.tableControlSetItem);
            this.tablePropertyValue = new PropertyValueDataTable();
            this.Tables.Add(this.tablePropertyValue);
            this.tableControlSet = new ControlSetDataTable();
            this.Tables.Add(this.tableControlSet);
            this.tableControl = new ControlDataTable();
            this.Tables.Add(this.tableControl);
            this.tableItemProperty = new ItemPropertyDataTable();
            this.Tables.Add(this.tableItemProperty);
            this.tableControlProperty = new ControlPropertyDataTable();
            this.Tables.Add(this.tableControlProperty);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ControlSetControlSetItem", new DataColumn[] {
                        this.tableControlSet.ControlSetGuidColumn}, new DataColumn[] {
                        this.tableControlSetItem.ControlSetGuidColumn});
            this.tableControlSetItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ControlControlSetItem", new DataColumn[] {
                        this.tableControl.ControlGuidColumn}, new DataColumn[] {
                        this.tableControlSetItem.ControlGuidColumn});
            this.tableControlSetItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ControlPropertyPropertyValue", new DataColumn[] {
                        this.tableControlProperty.ControlPropertyGuidColumn}, new DataColumn[] {
                        this.tablePropertyValue.ControlPropertyGuidColumn});
            this.tablePropertyValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ItemPropertyPropertyValue", new DataColumn[] {
                        this.tableItemProperty.ItemPropertyGuidColumn}, new DataColumn[] {
                        this.tablePropertyValue.ItemPropertyGuidColumn});
            this.tablePropertyValue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ControlSetItemItemProperty", new DataColumn[] {
                        this.tableControlSetItem.ControlSetItemGuidColumn}, new DataColumn[] {
                        this.tableItemProperty.ControlSetItemGuidColumn});
            this.tableItemProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ControlControlProperty", new DataColumn[] {
                        this.tableControl.ControlGuidColumn}, new DataColumn[] {
                        this.tableControlProperty.ControlGuidColumn});
            this.tableControlProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationControlSetControlSetItem = new DataRelation("ControlSetControlSetItem", new DataColumn[] {
                        this.tableControlSet.ControlSetGuidColumn}, new DataColumn[] {
                        this.tableControlSetItem.ControlSetGuidColumn}, false);
            this.Relations.Add(this.relationControlSetControlSetItem);
            this.relationControlControlSetItem = new DataRelation("ControlControlSetItem", new DataColumn[] {
                        this.tableControl.ControlGuidColumn}, new DataColumn[] {
                        this.tableControlSetItem.ControlGuidColumn}, false);
            this.Relations.Add(this.relationControlControlSetItem);
            this.relationControlSetItemItemProperty = new DataRelation("ControlSetItemItemProperty", new DataColumn[] {
                        this.tableControlSetItem.ControlSetItemGuidColumn}, new DataColumn[] {
                        this.tableItemProperty.ControlSetItemGuidColumn}, false);
            this.Relations.Add(this.relationControlSetItemItemProperty);
            this.relationControlControlProperty = new DataRelation("ControlControlProperty", new DataColumn[] {
                        this.tableControl.ControlGuidColumn}, new DataColumn[] {
                        this.tableControlProperty.ControlGuidColumn}, false);
            this.Relations.Add(this.relationControlControlProperty);
            this.relationControlPropertyPropertyValue = new DataRelation("ControlPropertyPropertyValue", new DataColumn[] {
                        this.tableControlProperty.ControlPropertyGuidColumn}, new DataColumn[] {
                        this.tablePropertyValue.ControlPropertyGuidColumn}, false);
            this.Relations.Add(this.relationControlPropertyPropertyValue);
            this.relationItemPropertyPropertyValue = new DataRelation("ItemPropertyPropertyValue", new DataColumn[] {
                        this.tableItemProperty.ItemPropertyGuidColumn}, new DataColumn[] {
                        this.tablePropertyValue.ItemPropertyGuidColumn}, false);
            this.Relations.Add(this.relationItemPropertyPropertyValue);
        }
        
        private bool ShouldSerializeControlSetItem() {
            return false;
        }
        
        private bool ShouldSerializePropertyValue() {
            return false;
        }
        
        private bool ShouldSerializeControlSet() {
            return false;
        }
        
        private bool ShouldSerializeControl() {
            return false;
        }
        
        private bool ShouldSerializeItemProperty() {
            return false;
        }
        
        private bool ShouldSerializeControlProperty() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ControlSetItemRowChangeEventHandler(object sender, ControlSetItemRowChangeEvent e);
        
        public delegate void PropertyValueRowChangeEventHandler(object sender, PropertyValueRowChangeEvent e);
        
        public delegate void ControlSetRowChangeEventHandler(object sender, ControlSetRowChangeEvent e);
        
        public delegate void ControlRowChangeEventHandler(object sender, ControlRowChangeEvent e);
        
        public delegate void ItemPropertyRowChangeEventHandler(object sender, ItemPropertyRowChangeEvent e);
        
        public delegate void ControlPropertyRowChangeEventHandler(object sender, ControlPropertyRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlSetItemDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnControlSetItemGuid;
            
            private DataColumn columnControlName;
            
            private DataColumn columnParentControlGuid;
            
            private DataColumn columnControlGuid;
            
            private DataColumn columnControlSetGuid;
            
            internal ControlSetItemDataTable() : 
                    base("ControlSetItem") {
                this.InitClass();
            }
            
            internal ControlSetItemDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ControlSetItemGuidColumn {
                get {
                    return this.columnControlSetItemGuid;
                }
            }
            
            internal DataColumn ControlNameColumn {
                get {
                    return this.columnControlName;
                }
            }
            
            internal DataColumn ParentControlGuidColumn {
                get {
                    return this.columnParentControlGuid;
                }
            }
            
            internal DataColumn ControlGuidColumn {
                get {
                    return this.columnControlGuid;
                }
            }
            
            internal DataColumn ControlSetGuidColumn {
                get {
                    return this.columnControlSetGuid;
                }
            }
            
            public ControlSetItemRow this[int index] {
                get {
                    return ((ControlSetItemRow)(this.Rows[index]));
                }
            }
            
            public event ControlSetItemRowChangeEventHandler ControlSetItemRowChanged;
            
            public event ControlSetItemRowChangeEventHandler ControlSetItemRowChanging;
            
            public event ControlSetItemRowChangeEventHandler ControlSetItemRowDeleted;
            
            public event ControlSetItemRowChangeEventHandler ControlSetItemRowDeleting;
            
            public void AddControlSetItemRow(ControlSetItemRow row) {
                this.Rows.Add(row);
            }
            
            public ControlSetItemRow AddControlSetItemRow(System.Guid ControlSetItemGuid, string ControlName, System.Guid ParentControlGuid, ControlRow parentControlRowByControlControlSetItem, ControlSetRow parentControlSetRowByControlSetControlSetItem) {
                ControlSetItemRow rowControlSetItemRow = ((ControlSetItemRow)(this.NewRow()));
                rowControlSetItemRow.ItemArray = new object[] {
                        ControlSetItemGuid,
                        ControlName,
                        ParentControlGuid,
                        parentControlRowByControlControlSetItem[0],
                        parentControlSetRowByControlSetControlSetItem[0]};
                this.Rows.Add(rowControlSetItemRow);
                return rowControlSetItemRow;
            }
            
            public ControlSetItemRow FindByControlSetItemGuid(System.Guid ControlSetItemGuid) {
                return ((ControlSetItemRow)(this.Rows.Find(new object[] {
                            ControlSetItemGuid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ControlSetItemDataTable cln = ((ControlSetItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ControlSetItemDataTable();
            }
            
            internal void InitVars() {
                this.columnControlSetItemGuid = this.Columns["ControlSetItemGuid"];
                this.columnControlName = this.Columns["ControlName"];
                this.columnParentControlGuid = this.Columns["ParentControlGuid"];
                this.columnControlGuid = this.Columns["ControlGuid"];
                this.columnControlSetGuid = this.Columns["ControlSetGuid"];
            }
            
            private void InitClass() {
                this.columnControlSetItemGuid = new DataColumn("ControlSetItemGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlSetItemGuid);
                this.columnControlName = new DataColumn("ControlName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlName);
                this.columnParentControlGuid = new DataColumn("ParentControlGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentControlGuid);
                this.columnControlGuid = new DataColumn("ControlGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlGuid);
                this.columnControlSetGuid = new DataColumn("ControlSetGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlSetGuid);
                this.Constraints.Add(new UniqueConstraint("dsOrigamGuiKey1", new DataColumn[] {
                                this.columnControlSetItemGuid}, true));
                this.columnControlSetItemGuid.AllowDBNull = false;
                this.columnControlSetItemGuid.Unique = true;
                this.columnParentControlGuid.AllowDBNull = false;
                this.columnControlGuid.AllowDBNull = false;
                this.columnControlSetGuid.AllowDBNull = false;
            }
            
            public ControlSetItemRow NewControlSetItemRow() {
                return ((ControlSetItemRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ControlSetItemRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ControlSetItemRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlSetItemRowChanged != null)) {
                    this.ControlSetItemRowChanged(this, new ControlSetItemRowChangeEvent(((ControlSetItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlSetItemRowChanging != null)) {
                    this.ControlSetItemRowChanging(this, new ControlSetItemRowChangeEvent(((ControlSetItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlSetItemRowDeleted != null)) {
                    this.ControlSetItemRowDeleted(this, new ControlSetItemRowChangeEvent(((ControlSetItemRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlSetItemRowDeleting != null)) {
                    this.ControlSetItemRowDeleting(this, new ControlSetItemRowChangeEvent(((ControlSetItemRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveControlSetItemRow(ControlSetItemRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlSetItemRow : DataRow {
            
            private ControlSetItemDataTable tableControlSetItem;
            
            internal ControlSetItemRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableControlSetItem = ((ControlSetItemDataTable)(this.Table));
            }
            
            public System.Guid ControlSetItemGuid {
                get {
                    return ((System.Guid)(this[this.tableControlSetItem.ControlSetItemGuidColumn]));
                }
                set {
                    this[this.tableControlSetItem.ControlSetItemGuidColumn] = value;
                }
            }
            
            public string ControlName {
                get {
                    try {
                        return ((string)(this[this.tableControlSetItem.ControlNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControlSetItem.ControlNameColumn] = value;
                }
            }
            
            public System.Guid ParentControlGuid {
                get {
                    return ((System.Guid)(this[this.tableControlSetItem.ParentControlGuidColumn]));
                }
                set {
                    this[this.tableControlSetItem.ParentControlGuidColumn] = value;
                }
            }
            
            public System.Guid ControlGuid {
                get {
                    return ((System.Guid)(this[this.tableControlSetItem.ControlGuidColumn]));
                }
                set {
                    this[this.tableControlSetItem.ControlGuidColumn] = value;
                }
            }
            
            public System.Guid ControlSetGuid {
                get {
                    return ((System.Guid)(this[this.tableControlSetItem.ControlSetGuidColumn]));
                }
                set {
                    this[this.tableControlSetItem.ControlSetGuidColumn] = value;
                }
            }
            
            public ControlSetRow ControlSetRow {
                get {
                    return ((ControlSetRow)(this.GetParentRow(this.Table.ParentRelations["ControlSetControlSetItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ControlSetControlSetItem"]);
                }
            }
            
            public ControlRow ControlRow {
                get {
                    return ((ControlRow)(this.GetParentRow(this.Table.ParentRelations["ControlControlSetItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ControlControlSetItem"]);
                }
            }
            
            public bool IsControlNameNull() {
                return this.IsNull(this.tableControlSetItem.ControlNameColumn);
            }
            
            public void SetControlNameNull() {
                this[this.tableControlSetItem.ControlNameColumn] = System.Convert.DBNull;
            }
            
            public ItemPropertyRow[] GetItemPropertyRows() {
                return ((ItemPropertyRow[])(this.GetChildRows(this.Table.ChildRelations["ControlSetItemItemProperty"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlSetItemRowChangeEvent : EventArgs {
            
            private ControlSetItemRow eventRow;
            
            private DataRowAction eventAction;
            
            public ControlSetItemRowChangeEvent(ControlSetItemRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ControlSetItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyValueDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPropertyValueGuid;
            
            private DataColumn columnValue;
            
            private DataColumn columnControlPropertyGuid;
            
            private DataColumn columnItemPropertyGuid;
            
            private DataColumn columnName;
            
            internal PropertyValueDataTable() : 
                    base("PropertyValue") {
                this.InitClass();
            }
            
            internal PropertyValueDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PropertyValueGuidColumn {
                get {
                    return this.columnPropertyValueGuid;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn ControlPropertyGuidColumn {
                get {
                    return this.columnControlPropertyGuid;
                }
            }
            
            internal DataColumn ItemPropertyGuidColumn {
                get {
                    return this.columnItemPropertyGuid;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public PropertyValueRow this[int index] {
                get {
                    return ((PropertyValueRow)(this.Rows[index]));
                }
            }
            
            public event PropertyValueRowChangeEventHandler PropertyValueRowChanged;
            
            public event PropertyValueRowChangeEventHandler PropertyValueRowChanging;
            
            public event PropertyValueRowChangeEventHandler PropertyValueRowDeleted;
            
            public event PropertyValueRowChangeEventHandler PropertyValueRowDeleting;
            
            public void AddPropertyValueRow(PropertyValueRow row) {
                this.Rows.Add(row);
            }
            
            public PropertyValueRow AddPropertyValueRow(System.Guid PropertyValueGuid, string Value, ControlPropertyRow parentControlPropertyRowByControlPropertyPropertyValue, ItemPropertyRow parentItemPropertyRowByItemPropertyPropertyValue, string Name) {
                PropertyValueRow rowPropertyValueRow = ((PropertyValueRow)(this.NewRow()));
                rowPropertyValueRow.ItemArray = new object[] {
                        PropertyValueGuid,
                        Value,
                        parentControlPropertyRowByControlPropertyPropertyValue[0],
                        parentItemPropertyRowByItemPropertyPropertyValue[0],
                        Name};
                this.Rows.Add(rowPropertyValueRow);
                return rowPropertyValueRow;
            }
            
            public PropertyValueRow FindByPropertyValueGuid(System.Guid PropertyValueGuid) {
                return ((PropertyValueRow)(this.Rows.Find(new object[] {
                            PropertyValueGuid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PropertyValueDataTable cln = ((PropertyValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PropertyValueDataTable();
            }
            
            internal void InitVars() {
                this.columnPropertyValueGuid = this.Columns["PropertyValueGuid"];
                this.columnValue = this.Columns["Value"];
                this.columnControlPropertyGuid = this.Columns["ControlPropertyGuid"];
                this.columnItemPropertyGuid = this.Columns["ItemPropertyGuid"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnPropertyValueGuid = new DataColumn("PropertyValueGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPropertyValueGuid);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.columnControlPropertyGuid = new DataColumn("ControlPropertyGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlPropertyGuid);
                this.columnItemPropertyGuid = new DataColumn("ItemPropertyGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemPropertyGuid);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.Constraints.Add(new UniqueConstraint("dsOrigamGuiKey2", new DataColumn[] {
                                this.columnPropertyValueGuid}, true));
                this.columnPropertyValueGuid.AllowDBNull = false;
                this.columnPropertyValueGuid.Unique = true;
            }
            
            public PropertyValueRow NewPropertyValueRow() {
                return ((PropertyValueRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PropertyValueRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PropertyValueRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyValueRowChanged != null)) {
                    this.PropertyValueRowChanged(this, new PropertyValueRowChangeEvent(((PropertyValueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyValueRowChanging != null)) {
                    this.PropertyValueRowChanging(this, new PropertyValueRowChangeEvent(((PropertyValueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyValueRowDeleted != null)) {
                    this.PropertyValueRowDeleted(this, new PropertyValueRowChangeEvent(((PropertyValueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyValueRowDeleting != null)) {
                    this.PropertyValueRowDeleting(this, new PropertyValueRowChangeEvent(((PropertyValueRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePropertyValueRow(PropertyValueRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyValueRow : DataRow {
            
            private PropertyValueDataTable tablePropertyValue;
            
            internal PropertyValueRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePropertyValue = ((PropertyValueDataTable)(this.Table));
            }
            
            public System.Guid PropertyValueGuid {
                get {
                    return ((System.Guid)(this[this.tablePropertyValue.PropertyValueGuidColumn]));
                }
                set {
                    this[this.tablePropertyValue.PropertyValueGuidColumn] = value;
                }
            }
            
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tablePropertyValue.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropertyValue.ValueColumn] = value;
                }
            }
            
            public System.Guid ControlPropertyGuid {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePropertyValue.ControlPropertyGuidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropertyValue.ControlPropertyGuidColumn] = value;
                }
            }
            
            public System.Guid ItemPropertyGuid {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePropertyValue.ItemPropertyGuidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropertyValue.ItemPropertyGuidColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePropertyValue.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePropertyValue.NameColumn] = value;
                }
            }
            
            public ControlPropertyRow ControlPropertyRow {
                get {
                    return ((ControlPropertyRow)(this.GetParentRow(this.Table.ParentRelations["ControlPropertyPropertyValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ControlPropertyPropertyValue"]);
                }
            }
            
            public ItemPropertyRow ItemPropertyRow {
                get {
                    return ((ItemPropertyRow)(this.GetParentRow(this.Table.ParentRelations["ItemPropertyPropertyValue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ItemPropertyPropertyValue"]);
                }
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tablePropertyValue.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tablePropertyValue.ValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlPropertyGuidNull() {
                return this.IsNull(this.tablePropertyValue.ControlPropertyGuidColumn);
            }
            
            public void SetControlPropertyGuidNull() {
                this[this.tablePropertyValue.ControlPropertyGuidColumn] = System.Convert.DBNull;
            }
            
            public bool IsItemPropertyGuidNull() {
                return this.IsNull(this.tablePropertyValue.ItemPropertyGuidColumn);
            }
            
            public void SetItemPropertyGuidNull() {
                this[this.tablePropertyValue.ItemPropertyGuidColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tablePropertyValue.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tablePropertyValue.NameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PropertyValueRowChangeEvent : EventArgs {
            
            private PropertyValueRow eventRow;
            
            private DataRowAction eventAction;
            
            public PropertyValueRowChangeEvent(PropertyValueRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PropertyValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlSetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnControlSetGuid;
            
            private DataColumn columnContainerName;
            
            internal ControlSetDataTable() : 
                    base("ControlSet") {
                this.InitClass();
            }
            
            internal ControlSetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ControlSetGuidColumn {
                get {
                    return this.columnControlSetGuid;
                }
            }
            
            internal DataColumn ContainerNameColumn {
                get {
                    return this.columnContainerName;
                }
            }
            
            public ControlSetRow this[int index] {
                get {
                    return ((ControlSetRow)(this.Rows[index]));
                }
            }
            
            public event ControlSetRowChangeEventHandler ControlSetRowChanged;
            
            public event ControlSetRowChangeEventHandler ControlSetRowChanging;
            
            public event ControlSetRowChangeEventHandler ControlSetRowDeleted;
            
            public event ControlSetRowChangeEventHandler ControlSetRowDeleting;
            
            public void AddControlSetRow(ControlSetRow row) {
                this.Rows.Add(row);
            }
            
            public ControlSetRow AddControlSetRow(System.Guid ControlSetGuid, string ContainerName) {
                ControlSetRow rowControlSetRow = ((ControlSetRow)(this.NewRow()));
                rowControlSetRow.ItemArray = new object[] {
                        ControlSetGuid,
                        ContainerName};
                this.Rows.Add(rowControlSetRow);
                return rowControlSetRow;
            }
            
            public ControlSetRow FindByControlSetGuid(System.Guid ControlSetGuid) {
                return ((ControlSetRow)(this.Rows.Find(new object[] {
                            ControlSetGuid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ControlSetDataTable cln = ((ControlSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ControlSetDataTable();
            }
            
            internal void InitVars() {
                this.columnControlSetGuid = this.Columns["ControlSetGuid"];
                this.columnContainerName = this.Columns["ContainerName"];
            }
            
            private void InitClass() {
                this.columnControlSetGuid = new DataColumn("ControlSetGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlSetGuid);
                this.columnContainerName = new DataColumn("ContainerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContainerName);
                this.Constraints.Add(new UniqueConstraint("dsOrigamGuiKey3", new DataColumn[] {
                                this.columnControlSetGuid}, true));
                this.columnControlSetGuid.AllowDBNull = false;
                this.columnControlSetGuid.Unique = true;
            }
            
            public ControlSetRow NewControlSetRow() {
                return ((ControlSetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ControlSetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ControlSetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlSetRowChanged != null)) {
                    this.ControlSetRowChanged(this, new ControlSetRowChangeEvent(((ControlSetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlSetRowChanging != null)) {
                    this.ControlSetRowChanging(this, new ControlSetRowChangeEvent(((ControlSetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlSetRowDeleted != null)) {
                    this.ControlSetRowDeleted(this, new ControlSetRowChangeEvent(((ControlSetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlSetRowDeleting != null)) {
                    this.ControlSetRowDeleting(this, new ControlSetRowChangeEvent(((ControlSetRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveControlSetRow(ControlSetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlSetRow : DataRow {
            
            private ControlSetDataTable tableControlSet;
            
            internal ControlSetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableControlSet = ((ControlSetDataTable)(this.Table));
            }
            
            public System.Guid ControlSetGuid {
                get {
                    return ((System.Guid)(this[this.tableControlSet.ControlSetGuidColumn]));
                }
                set {
                    this[this.tableControlSet.ControlSetGuidColumn] = value;
                }
            }
            
            public string ContainerName {
                get {
                    try {
                        return ((string)(this[this.tableControlSet.ContainerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControlSet.ContainerNameColumn] = value;
                }
            }
            
            public bool IsContainerNameNull() {
                return this.IsNull(this.tableControlSet.ContainerNameColumn);
            }
            
            public void SetContainerNameNull() {
                this[this.tableControlSet.ContainerNameColumn] = System.Convert.DBNull;
            }
            
            public ControlSetItemRow[] GetControlSetItemRows() {
                return ((ControlSetItemRow[])(this.GetChildRows(this.Table.ChildRelations["ControlSetControlSetItem"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlSetRowChangeEvent : EventArgs {
            
            private ControlSetRow eventRow;
            
            private DataRowAction eventAction;
            
            public ControlSetRowChangeEvent(ControlSetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ControlSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnControlGuid;
            
            private DataColumn columnControlType;
            
            private DataColumn columnIsComplexType;
            
            private DataColumn columnControlName;
            
            internal ControlDataTable() : 
                    base("Control") {
                this.InitClass();
            }
            
            internal ControlDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ControlGuidColumn {
                get {
                    return this.columnControlGuid;
                }
            }
            
            internal DataColumn ControlTypeColumn {
                get {
                    return this.columnControlType;
                }
            }
            
            internal DataColumn IsComplexTypeColumn {
                get {
                    return this.columnIsComplexType;
                }
            }
            
            internal DataColumn ControlNameColumn {
                get {
                    return this.columnControlName;
                }
            }
            
            public ControlRow this[int index] {
                get {
                    return ((ControlRow)(this.Rows[index]));
                }
            }
            
            public event ControlRowChangeEventHandler ControlRowChanged;
            
            public event ControlRowChangeEventHandler ControlRowChanging;
            
            public event ControlRowChangeEventHandler ControlRowDeleted;
            
            public event ControlRowChangeEventHandler ControlRowDeleting;
            
            public void AddControlRow(ControlRow row) {
                this.Rows.Add(row);
            }
            
            public ControlRow AddControlRow(System.Guid ControlGuid, string ControlType, bool IsComplexType, string ControlName) {
                ControlRow rowControlRow = ((ControlRow)(this.NewRow()));
                rowControlRow.ItemArray = new object[] {
                        ControlGuid,
                        ControlType,
                        IsComplexType,
                        ControlName};
                this.Rows.Add(rowControlRow);
                return rowControlRow;
            }
            
            public ControlRow FindByControlGuid(System.Guid ControlGuid) {
                return ((ControlRow)(this.Rows.Find(new object[] {
                            ControlGuid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ControlDataTable cln = ((ControlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ControlDataTable();
            }
            
            internal void InitVars() {
                this.columnControlGuid = this.Columns["ControlGuid"];
                this.columnControlType = this.Columns["ControlType"];
                this.columnIsComplexType = this.Columns["IsComplexType"];
                this.columnControlName = this.Columns["ControlName"];
            }
            
            private void InitClass() {
                this.columnControlGuid = new DataColumn("ControlGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlGuid);
                this.columnControlType = new DataColumn("ControlType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlType);
                this.columnIsComplexType = new DataColumn("IsComplexType", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsComplexType);
                this.columnControlName = new DataColumn("ControlName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlName);
                this.Constraints.Add(new UniqueConstraint("dsOrigamGuiKey4", new DataColumn[] {
                                this.columnControlGuid}, true));
                this.columnControlGuid.AllowDBNull = false;
                this.columnControlGuid.Unique = true;
            }
            
            public ControlRow NewControlRow() {
                return ((ControlRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ControlRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ControlRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlRowChanged != null)) {
                    this.ControlRowChanged(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlRowChanging != null)) {
                    this.ControlRowChanging(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlRowDeleted != null)) {
                    this.ControlRowDeleted(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlRowDeleting != null)) {
                    this.ControlRowDeleting(this, new ControlRowChangeEvent(((ControlRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveControlRow(ControlRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlRow : DataRow {
            
            private ControlDataTable tableControl;
            
            internal ControlRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableControl = ((ControlDataTable)(this.Table));
            }
            
            public System.Guid ControlGuid {
                get {
                    return ((System.Guid)(this[this.tableControl.ControlGuidColumn]));
                }
                set {
                    this[this.tableControl.ControlGuidColumn] = value;
                }
            }
            
            public string ControlType {
                get {
                    try {
                        return ((string)(this[this.tableControl.ControlTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControl.ControlTypeColumn] = value;
                }
            }
            
            public bool IsComplexType {
                get {
                    try {
                        return ((bool)(this[this.tableControl.IsComplexTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControl.IsComplexTypeColumn] = value;
                }
            }
            
            public string ControlName {
                get {
                    try {
                        return ((string)(this[this.tableControl.ControlNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControl.ControlNameColumn] = value;
                }
            }
            
            public bool IsControlTypeNull() {
                return this.IsNull(this.tableControl.ControlTypeColumn);
            }
            
            public void SetControlTypeNull() {
                this[this.tableControl.ControlTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsComplexTypeNull() {
                return this.IsNull(this.tableControl.IsComplexTypeColumn);
            }
            
            public void SetIsComplexTypeNull() {
                this[this.tableControl.IsComplexTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlNameNull() {
                return this.IsNull(this.tableControl.ControlNameColumn);
            }
            
            public void SetControlNameNull() {
                this[this.tableControl.ControlNameColumn] = System.Convert.DBNull;
            }
            
            public ControlSetItemRow[] GetControlSetItemRows() {
                return ((ControlSetItemRow[])(this.GetChildRows(this.Table.ChildRelations["ControlControlSetItem"])));
            }
            
            public ControlPropertyRow[] GetControlPropertyRows() {
                return ((ControlPropertyRow[])(this.GetChildRows(this.Table.ChildRelations["ControlControlProperty"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlRowChangeEvent : EventArgs {
            
            private ControlRow eventRow;
            
            private DataRowAction eventAction;
            
            public ControlRowChangeEvent(ControlRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ControlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemPropertyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnItemPropertyGuid;
            
            private DataColumn columnControlSetItemGuid;
            
            private DataColumn columnMasterControlSetItemGuid;
            
            internal ItemPropertyDataTable() : 
                    base("ItemProperty") {
                this.InitClass();
            }
            
            internal ItemPropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ItemPropertyGuidColumn {
                get {
                    return this.columnItemPropertyGuid;
                }
            }
            
            internal DataColumn ControlSetItemGuidColumn {
                get {
                    return this.columnControlSetItemGuid;
                }
            }
            
            internal DataColumn MasterControlSetItemGuidColumn {
                get {
                    return this.columnMasterControlSetItemGuid;
                }
            }
            
            public ItemPropertyRow this[int index] {
                get {
                    return ((ItemPropertyRow)(this.Rows[index]));
                }
            }
            
            public event ItemPropertyRowChangeEventHandler ItemPropertyRowChanged;
            
            public event ItemPropertyRowChangeEventHandler ItemPropertyRowChanging;
            
            public event ItemPropertyRowChangeEventHandler ItemPropertyRowDeleted;
            
            public event ItemPropertyRowChangeEventHandler ItemPropertyRowDeleting;
            
            public void AddItemPropertyRow(ItemPropertyRow row) {
                this.Rows.Add(row);
            }
            
            public ItemPropertyRow AddItemPropertyRow(System.Guid ItemPropertyGuid, ControlSetItemRow parentControlSetItemRowByControlSetItemItemProperty, System.Guid MasterControlSetItemGuid) {
                ItemPropertyRow rowItemPropertyRow = ((ItemPropertyRow)(this.NewRow()));
                rowItemPropertyRow.ItemArray = new object[] {
                        ItemPropertyGuid,
                        parentControlSetItemRowByControlSetItemItemProperty[0],
                        MasterControlSetItemGuid};
                this.Rows.Add(rowItemPropertyRow);
                return rowItemPropertyRow;
            }
            
            public ItemPropertyRow FindByItemPropertyGuid(System.Guid ItemPropertyGuid) {
                return ((ItemPropertyRow)(this.Rows.Find(new object[] {
                            ItemPropertyGuid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ItemPropertyDataTable cln = ((ItemPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ItemPropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnItemPropertyGuid = this.Columns["ItemPropertyGuid"];
                this.columnControlSetItemGuid = this.Columns["ControlSetItemGuid"];
                this.columnMasterControlSetItemGuid = this.Columns["MasterControlSetItemGuid"];
            }
            
            private void InitClass() {
                this.columnItemPropertyGuid = new DataColumn("ItemPropertyGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnItemPropertyGuid);
                this.columnControlSetItemGuid = new DataColumn("ControlSetItemGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlSetItemGuid);
                this.columnMasterControlSetItemGuid = new DataColumn("MasterControlSetItemGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMasterControlSetItemGuid);
                this.Constraints.Add(new UniqueConstraint("dsOrigamGuiKey5", new DataColumn[] {
                                this.columnItemPropertyGuid}, true));
                this.columnItemPropertyGuid.AllowDBNull = false;
                this.columnItemPropertyGuid.Unique = true;
                this.columnControlSetItemGuid.AllowDBNull = false;
                this.columnMasterControlSetItemGuid.AllowDBNull = false;
            }
            
            public ItemPropertyRow NewItemPropertyRow() {
                return ((ItemPropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ItemPropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ItemPropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItemPropertyRowChanged != null)) {
                    this.ItemPropertyRowChanged(this, new ItemPropertyRowChangeEvent(((ItemPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItemPropertyRowChanging != null)) {
                    this.ItemPropertyRowChanging(this, new ItemPropertyRowChangeEvent(((ItemPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItemPropertyRowDeleted != null)) {
                    this.ItemPropertyRowDeleted(this, new ItemPropertyRowChangeEvent(((ItemPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItemPropertyRowDeleting != null)) {
                    this.ItemPropertyRowDeleting(this, new ItemPropertyRowChangeEvent(((ItemPropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveItemPropertyRow(ItemPropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemPropertyRow : DataRow {
            
            private ItemPropertyDataTable tableItemProperty;
            
            internal ItemPropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableItemProperty = ((ItemPropertyDataTable)(this.Table));
            }
            
            public System.Guid ItemPropertyGuid {
                get {
                    return ((System.Guid)(this[this.tableItemProperty.ItemPropertyGuidColumn]));
                }
                set {
                    this[this.tableItemProperty.ItemPropertyGuidColumn] = value;
                }
            }
            
            public System.Guid ControlSetItemGuid {
                get {
                    return ((System.Guid)(this[this.tableItemProperty.ControlSetItemGuidColumn]));
                }
                set {
                    this[this.tableItemProperty.ControlSetItemGuidColumn] = value;
                }
            }
            
            public System.Guid MasterControlSetItemGuid {
                get {
                    return ((System.Guid)(this[this.tableItemProperty.MasterControlSetItemGuidColumn]));
                }
                set {
                    this[this.tableItemProperty.MasterControlSetItemGuidColumn] = value;
                }
            }
            
            public ControlSetItemRow ControlSetItemRow {
                get {
                    return ((ControlSetItemRow)(this.GetParentRow(this.Table.ParentRelations["ControlSetItemItemProperty"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ControlSetItemItemProperty"]);
                }
            }
            
            public PropertyValueRow[] GetPropertyValueRows() {
                return ((PropertyValueRow[])(this.GetChildRows(this.Table.ChildRelations["ItemPropertyPropertyValue"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ItemPropertyRowChangeEvent : EventArgs {
            
            private ItemPropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public ItemPropertyRowChangeEvent(ItemPropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ItemPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlPropertyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnControlPropertyGuid;
            
            private DataColumn columnControlGuid;
            
            private DataColumn columnPropertyName;
            
            private DataColumn columnPropertyType;
            
            internal ControlPropertyDataTable() : 
                    base("ControlProperty") {
                this.InitClass();
            }
            
            internal ControlPropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ControlPropertyGuidColumn {
                get {
                    return this.columnControlPropertyGuid;
                }
            }
            
            internal DataColumn ControlGuidColumn {
                get {
                    return this.columnControlGuid;
                }
            }
            
            internal DataColumn PropertyNameColumn {
                get {
                    return this.columnPropertyName;
                }
            }
            
            internal DataColumn PropertyTypeColumn {
                get {
                    return this.columnPropertyType;
                }
            }
            
            public ControlPropertyRow this[int index] {
                get {
                    return ((ControlPropertyRow)(this.Rows[index]));
                }
            }
            
            public event ControlPropertyRowChangeEventHandler ControlPropertyRowChanged;
            
            public event ControlPropertyRowChangeEventHandler ControlPropertyRowChanging;
            
            public event ControlPropertyRowChangeEventHandler ControlPropertyRowDeleted;
            
            public event ControlPropertyRowChangeEventHandler ControlPropertyRowDeleting;
            
            public void AddControlPropertyRow(ControlPropertyRow row) {
                this.Rows.Add(row);
            }
            
            public ControlPropertyRow AddControlPropertyRow(System.Guid ControlPropertyGuid, ControlRow parentControlRowByControlControlProperty, string PropertyName, string PropertyType) {
                ControlPropertyRow rowControlPropertyRow = ((ControlPropertyRow)(this.NewRow()));
                rowControlPropertyRow.ItemArray = new object[] {
                        ControlPropertyGuid,
                        parentControlRowByControlControlProperty[0],
                        PropertyName,
                        PropertyType};
                this.Rows.Add(rowControlPropertyRow);
                return rowControlPropertyRow;
            }
            
            public ControlPropertyRow FindByControlPropertyGuid(System.Guid ControlPropertyGuid) {
                return ((ControlPropertyRow)(this.Rows.Find(new object[] {
                            ControlPropertyGuid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ControlPropertyDataTable cln = ((ControlPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ControlPropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnControlPropertyGuid = this.Columns["ControlPropertyGuid"];
                this.columnControlGuid = this.Columns["ControlGuid"];
                this.columnPropertyName = this.Columns["PropertyName"];
                this.columnPropertyType = this.Columns["PropertyType"];
            }
            
            private void InitClass() {
                this.columnControlPropertyGuid = new DataColumn("ControlPropertyGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlPropertyGuid);
                this.columnControlGuid = new DataColumn("ControlGuid", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlGuid);
                this.columnPropertyName = new DataColumn("PropertyName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPropertyName);
                this.columnPropertyType = new DataColumn("PropertyType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPropertyType);
                this.Constraints.Add(new UniqueConstraint("dsOrigamGuiKey6", new DataColumn[] {
                                this.columnControlPropertyGuid}, true));
                this.columnControlPropertyGuid.AllowDBNull = false;
                this.columnControlPropertyGuid.Unique = true;
                this.columnControlGuid.AllowDBNull = false;
            }
            
            public ControlPropertyRow NewControlPropertyRow() {
                return ((ControlPropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ControlPropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ControlPropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlPropertyRowChanged != null)) {
                    this.ControlPropertyRowChanged(this, new ControlPropertyRowChangeEvent(((ControlPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlPropertyRowChanging != null)) {
                    this.ControlPropertyRowChanging(this, new ControlPropertyRowChangeEvent(((ControlPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlPropertyRowDeleted != null)) {
                    this.ControlPropertyRowDeleted(this, new ControlPropertyRowChangeEvent(((ControlPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlPropertyRowDeleting != null)) {
                    this.ControlPropertyRowDeleting(this, new ControlPropertyRowChangeEvent(((ControlPropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveControlPropertyRow(ControlPropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlPropertyRow : DataRow {
            
            private ControlPropertyDataTable tableControlProperty;
            
            internal ControlPropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableControlProperty = ((ControlPropertyDataTable)(this.Table));
            }
            
            public System.Guid ControlPropertyGuid {
                get {
                    return ((System.Guid)(this[this.tableControlProperty.ControlPropertyGuidColumn]));
                }
                set {
                    this[this.tableControlProperty.ControlPropertyGuidColumn] = value;
                }
            }
            
            public System.Guid ControlGuid {
                get {
                    return ((System.Guid)(this[this.tableControlProperty.ControlGuidColumn]));
                }
                set {
                    this[this.tableControlProperty.ControlGuidColumn] = value;
                }
            }
            
            public string PropertyName {
                get {
                    try {
                        return ((string)(this[this.tableControlProperty.PropertyNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControlProperty.PropertyNameColumn] = value;
                }
            }
            
            public string PropertyType {
                get {
                    try {
                        return ((string)(this[this.tableControlProperty.PropertyTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControlProperty.PropertyTypeColumn] = value;
                }
            }
            
            public ControlRow ControlRow {
                get {
                    return ((ControlRow)(this.GetParentRow(this.Table.ParentRelations["ControlControlProperty"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ControlControlProperty"]);
                }
            }
            
            public bool IsPropertyNameNull() {
                return this.IsNull(this.tableControlProperty.PropertyNameColumn);
            }
            
            public void SetPropertyNameNull() {
                this[this.tableControlProperty.PropertyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPropertyTypeNull() {
                return this.IsNull(this.tableControlProperty.PropertyTypeColumn);
            }
            
            public void SetPropertyTypeNull() {
                this[this.tableControlProperty.PropertyTypeColumn] = System.Convert.DBNull;
            }
            
            public PropertyValueRow[] GetPropertyValueRows() {
                return ((PropertyValueRow[])(this.GetChildRows(this.Table.ChildRelations["ControlPropertyPropertyValue"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ControlPropertyRowChangeEvent : EventArgs {
            
            private ControlPropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public ControlPropertyRowChangeEvent(ControlPropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ControlPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2407
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Origam.Mail {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class MailData : DataSet {
        
        private MailDataTable tableMail;
        
        private MailAttachmentDataTable tableMailAttachment;
        
        private DataRelation relationMailAttachment;
        
        public MailData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected MailData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Mail"] != null)) {
                    this.Tables.Add(new MailDataTable(ds.Tables["Mail"]));
                }
                if ((ds.Tables["MailAttachment"] != null)) {
                    this.Tables.Add(new MailAttachmentDataTable(ds.Tables["MailAttachment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailDataTable Mail {
            get {
                return this.tableMail;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailAttachmentDataTable MailAttachment {
            get {
                return this.tableMailAttachment;
            }
        }
        
        public override DataSet Clone() {
            MailData cln = ((MailData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Mail"] != null)) {
                this.Tables.Add(new MailDataTable(ds.Tables["Mail"]));
            }
            if ((ds.Tables["MailAttachment"] != null)) {
                this.Tables.Add(new MailAttachmentDataTable(ds.Tables["MailAttachment"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMail = ((MailDataTable)(this.Tables["Mail"]));
            if ((this.tableMail != null)) {
                this.tableMail.InitVars();
            }
            this.tableMailAttachment = ((MailAttachmentDataTable)(this.Tables["MailAttachment"]));
            if ((this.tableMailAttachment != null)) {
                this.tableMailAttachment.InitVars();
            }
            this.relationMailAttachment = this.Relations["MailAttachment"];
        }
        
        private void InitClass() {
            this.DataSetName = "MailData";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("cs-CZ");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMail = new MailDataTable();
            this.Tables.Add(this.tableMail);
            this.tableMailAttachment = new MailAttachmentDataTable();
            this.Tables.Add(this.tableMailAttachment);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("FK_Mail", new DataColumn[] {
                        this.tableMail.IdColumn}, new DataColumn[] {
                        this.tableMailAttachment.refParentRecordIdColumn});
            this.tableMailAttachment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationMailAttachment = new DataRelation("MailAttachment", new DataColumn[] {
                        this.tableMail.IdColumn}, new DataColumn[] {
                        this.tableMailAttachment.refParentRecordIdColumn}, false);
            this.relationMailAttachment.Nested = true;
            this.Relations.Add(this.relationMailAttachment);
        }
        
        private bool ShouldSerializeMail() {
            return false;
        }
        
        private bool ShouldSerializeMailAttachment() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MailRowChangeEventHandler(object sender, MailRowChangeEvent e);
        
        public delegate void MailAttachmentRowChangeEventHandler(object sender, MailAttachmentRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDateSent;
            
            private DataColumn columnSender;
            
            private DataColumn columnRecipient;
            
            private DataColumn columnSubject;
            
            private DataColumn columnDateReceived;
            
            private DataColumn columnMessageBody;
            
            private DataColumn columnRecordCreatedBy;
            
            private DataColumn columnRecordUpdatedBy;
            
            private DataColumn columnId;
            
            private DataColumn columnRecordCreated;
            
            private DataColumn columnRecordUpdated;
            
            private DataColumn columnSelected;
            
            internal MailDataTable() : 
                    base("Mail") {
                this.InitClass();
            }
            
            internal MailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DateSentColumn {
                get {
                    return this.columnDateSent;
                }
            }
            
            internal DataColumn SenderColumn {
                get {
                    return this.columnSender;
                }
            }
            
            internal DataColumn RecipientColumn {
                get {
                    return this.columnRecipient;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn DateReceivedColumn {
                get {
                    return this.columnDateReceived;
                }
            }
            
            internal DataColumn MessageBodyColumn {
                get {
                    return this.columnMessageBody;
                }
            }
            
            internal DataColumn RecordCreatedByColumn {
                get {
                    return this.columnRecordCreatedBy;
                }
            }
            
            internal DataColumn RecordUpdatedByColumn {
                get {
                    return this.columnRecordUpdatedBy;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn RecordCreatedColumn {
                get {
                    return this.columnRecordCreated;
                }
            }
            
            internal DataColumn RecordUpdatedColumn {
                get {
                    return this.columnRecordUpdated;
                }
            }
            
            internal DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            public MailRow this[int index] {
                get {
                    return ((MailRow)(this.Rows[index]));
                }
            }
            
            public event MailRowChangeEventHandler MailRowChanged;
            
            public event MailRowChangeEventHandler MailRowChanging;
            
            public event MailRowChangeEventHandler MailRowDeleted;
            
            public event MailRowChangeEventHandler MailRowDeleting;
            
            public void AddMailRow(MailRow row) {
                this.Rows.Add(row);
            }
            
            public MailRow AddMailRow(System.DateTime DateSent, string Sender, string Recipient, string Subject, System.DateTime DateReceived, string MessageBody, System.Guid RecordCreatedBy, System.Guid RecordUpdatedBy, System.Guid Id, System.DateTime RecordCreated, System.DateTime RecordUpdated, bool Selected) {
                MailRow rowMailRow = ((MailRow)(this.NewRow()));
                rowMailRow.ItemArray = new object[] {
                        DateSent,
                        Sender,
                        Recipient,
                        Subject,
                        DateReceived,
                        MessageBody,
                        RecordCreatedBy,
                        RecordUpdatedBy,
                        Id,
                        RecordCreated,
                        RecordUpdated,
                        Selected};
                this.Rows.Add(rowMailRow);
                return rowMailRow;
            }
            
            public MailRow FindById(System.Guid Id) {
                return ((MailRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MailDataTable cln = ((MailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MailDataTable();
            }
            
            internal void InitVars() {
                this.columnDateSent = this.Columns["DateSent"];
                this.columnSender = this.Columns["Sender"];
                this.columnRecipient = this.Columns["Recipient"];
                this.columnSubject = this.Columns["Subject"];
                this.columnDateReceived = this.Columns["DateReceived"];
                this.columnMessageBody = this.Columns["MessageBody"];
                this.columnRecordCreatedBy = this.Columns["RecordCreatedBy"];
                this.columnRecordUpdatedBy = this.Columns["RecordUpdatedBy"];
                this.columnId = this.Columns["Id"];
                this.columnRecordCreated = this.Columns["RecordCreated"];
                this.columnRecordUpdated = this.Columns["RecordUpdated"];
                this.columnSelected = this.Columns["Selected"];
            }
            
            private void InitClass() {
                this.columnDateSent = new DataColumn("DateSent", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDateSent);
                this.columnSender = new DataColumn("Sender", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSender);
                this.columnRecipient = new DataColumn("Recipient", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecipient);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSubject);
                this.columnDateReceived = new DataColumn("DateReceived", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDateReceived);
                this.columnMessageBody = new DataColumn("MessageBody", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessageBody);
                this.columnRecordCreatedBy = new DataColumn("RecordCreatedBy", typeof(System.Guid), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecordCreatedBy);
                this.columnRecordUpdatedBy = new DataColumn("RecordUpdatedBy", typeof(System.Guid), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecordUpdatedBy);
                this.columnId = new DataColumn("Id", typeof(System.Guid), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnId);
                this.columnRecordCreated = new DataColumn("RecordCreated", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecordCreated);
                this.columnRecordUpdated = new DataColumn("RecordUpdated", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecordUpdated);
                this.columnSelected = new DataColumn("Selected", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSelected);
                this.Constraints.Add(new UniqueConstraint("PK_Id", new DataColumn[] {
                                this.columnId}, true));
                this.columnDateSent.AllowDBNull = false;
                this.columnDateSent.Namespace = "";
                this.columnDateSent.Caption = "Odesláno";
                this.columnSender.AllowDBNull = false;
                this.columnSender.Caption = "Od";
                this.columnSender.MaxLength = 500;
                this.columnRecipient.AllowDBNull = false;
                this.columnRecipient.Caption = "Pro";
                this.columnSubject.Namespace = "";
                this.columnSubject.Caption = "Předmět";
                this.columnSubject.MaxLength = 500;
                this.columnDateReceived.Namespace = "";
                this.columnDateReceived.Caption = "Přijato";
                this.columnMessageBody.Caption = "Zpráva";
                this.columnRecordCreatedBy.Namespace = "";
                this.columnRecordUpdatedBy.Namespace = "";
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnId.Namespace = "";
                this.columnRecordCreated.Namespace = "";
                this.columnRecordUpdated.Namespace = "";
                this.columnSelected.AllowDBNull = false;
                this.columnSelected.Namespace = "";
                this.columnSelected.DefaultValue = false;
                this.Locale = new System.Globalization.CultureInfo("cs-CZ");
                this.DisplayExpression = "\'Mail\'";
            }
            
            public MailRow NewMailRow() {
                return ((MailRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MailRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailRowChanged != null)) {
                    this.MailRowChanged(this, new MailRowChangeEvent(((MailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailRowChanging != null)) {
                    this.MailRowChanging(this, new MailRowChangeEvent(((MailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailRowDeleted != null)) {
                    this.MailRowDeleted(this, new MailRowChangeEvent(((MailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailRowDeleting != null)) {
                    this.MailRowDeleting(this, new MailRowChangeEvent(((MailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMailRow(MailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailRow : DataRow {
            
            private MailDataTable tableMail;
            
            internal MailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMail = ((MailDataTable)(this.Table));
            }
            
            public System.DateTime DateSent {
                get {
                    return ((System.DateTime)(this[this.tableMail.DateSentColumn]));
                }
                set {
                    this[this.tableMail.DateSentColumn] = value;
                }
            }
            
            public string Sender {
                get {
                    return ((string)(this[this.tableMail.SenderColumn]));
                }
                set {
                    this[this.tableMail.SenderColumn] = value;
                }
            }
            
            public string Recipient {
                get {
                    return ((string)(this[this.tableMail.RecipientColumn]));
                }
                set {
                    this[this.tableMail.RecipientColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableMail.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.SubjectColumn] = value;
                }
            }
            
            public System.DateTime DateReceived {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMail.DateReceivedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.DateReceivedColumn] = value;
                }
            }
            
            public string MessageBody {
                get {
                    try {
                        return ((string)(this[this.tableMail.MessageBodyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.MessageBodyColumn] = value;
                }
            }
            
            public System.Guid RecordCreatedBy {
                get {
                    try {
                        return ((System.Guid)(this[this.tableMail.RecordCreatedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.RecordCreatedByColumn] = value;
                }
            }
            
            public System.Guid RecordUpdatedBy {
                get {
                    try {
                        return ((System.Guid)(this[this.tableMail.RecordUpdatedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.RecordUpdatedByColumn] = value;
                }
            }
            
            public System.Guid Id {
                get {
                    return ((System.Guid)(this[this.tableMail.IdColumn]));
                }
                set {
                    this[this.tableMail.IdColumn] = value;
                }
            }
            
            public System.DateTime RecordCreated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMail.RecordCreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.RecordCreatedColumn] = value;
                }
            }
            
            public System.DateTime RecordUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMail.RecordUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMail.RecordUpdatedColumn] = value;
                }
            }
            
            public bool Selected {
                get {
                    return ((bool)(this[this.tableMail.SelectedColumn]));
                }
                set {
                    this[this.tableMail.SelectedColumn] = value;
                }
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableMail.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableMail.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsDateReceivedNull() {
                return this.IsNull(this.tableMail.DateReceivedColumn);
            }
            
            public void SetDateReceivedNull() {
                this[this.tableMail.DateReceivedColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessageBodyNull() {
                return this.IsNull(this.tableMail.MessageBodyColumn);
            }
            
            public void SetMessageBodyNull() {
                this[this.tableMail.MessageBodyColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordCreatedByNull() {
                return this.IsNull(this.tableMail.RecordCreatedByColumn);
            }
            
            public void SetRecordCreatedByNull() {
                this[this.tableMail.RecordCreatedByColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordUpdatedByNull() {
                return this.IsNull(this.tableMail.RecordUpdatedByColumn);
            }
            
            public void SetRecordUpdatedByNull() {
                this[this.tableMail.RecordUpdatedByColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordCreatedNull() {
                return this.IsNull(this.tableMail.RecordCreatedColumn);
            }
            
            public void SetRecordCreatedNull() {
                this[this.tableMail.RecordCreatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordUpdatedNull() {
                return this.IsNull(this.tableMail.RecordUpdatedColumn);
            }
            
            public void SetRecordUpdatedNull() {
                this[this.tableMail.RecordUpdatedColumn] = System.Convert.DBNull;
            }
            
            public MailAttachmentRow[] GetMailAttachmentRows() {
                return ((MailAttachmentRow[])(this.GetChildRows(this.Table.ChildRelations["MailAttachment"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailRowChangeEvent : EventArgs {
            
            private MailRow eventRow;
            
            private DataRowAction eventAction;
            
            public MailRowChangeEvent(MailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailAttachmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNote;
            
            private DataColumn columnFileName;
            
            private DataColumn columnData;
            
            private DataColumn columnrefParentRecordEntityId;
            
            private DataColumn columnrefParentRecordId;
            
            private DataColumn columnRecordUpdated;
            
            private DataColumn columnRecordCreatedServer;
            
            private DataColumn columnId;
            
            private DataColumn columnRecordUpdatedServer;
            
            private DataColumn columnRecordCreatedBy;
            
            private DataColumn columnRecordCreated;
            
            private DataColumn columnRecordUpdatedBy;
            
            internal MailAttachmentDataTable() : 
                    base("MailAttachment") {
                this.InitClass();
            }
            
            internal MailAttachmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            internal DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            internal DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            internal DataColumn refParentRecordEntityIdColumn {
                get {
                    return this.columnrefParentRecordEntityId;
                }
            }
            
            internal DataColumn refParentRecordIdColumn {
                get {
                    return this.columnrefParentRecordId;
                }
            }
            
            internal DataColumn RecordUpdatedColumn {
                get {
                    return this.columnRecordUpdated;
                }
            }
            
            internal DataColumn RecordCreatedServerColumn {
                get {
                    return this.columnRecordCreatedServer;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn RecordUpdatedServerColumn {
                get {
                    return this.columnRecordUpdatedServer;
                }
            }
            
            internal DataColumn RecordCreatedByColumn {
                get {
                    return this.columnRecordCreatedBy;
                }
            }
            
            internal DataColumn RecordCreatedColumn {
                get {
                    return this.columnRecordCreated;
                }
            }
            
            internal DataColumn RecordUpdatedByColumn {
                get {
                    return this.columnRecordUpdatedBy;
                }
            }
            
            public MailAttachmentRow this[int index] {
                get {
                    return ((MailAttachmentRow)(this.Rows[index]));
                }
            }
            
            public event MailAttachmentRowChangeEventHandler MailAttachmentRowChanged;
            
            public event MailAttachmentRowChangeEventHandler MailAttachmentRowChanging;
            
            public event MailAttachmentRowChangeEventHandler MailAttachmentRowDeleted;
            
            public event MailAttachmentRowChangeEventHandler MailAttachmentRowDeleting;
            
            public void AddMailAttachmentRow(MailAttachmentRow row) {
                this.Rows.Add(row);
            }
            
            public MailAttachmentRow AddMailAttachmentRow(string Note, string FileName, System.Byte[] Data, System.Guid refParentRecordEntityId, MailRow parentMailRowByMailAttachment, System.DateTime RecordUpdated, System.DateTime RecordCreatedServer, System.Guid Id, System.DateTime RecordUpdatedServer, System.Guid RecordCreatedBy, System.DateTime RecordCreated, System.Guid RecordUpdatedBy) {
                MailAttachmentRow rowMailAttachmentRow = ((MailAttachmentRow)(this.NewRow()));
                rowMailAttachmentRow.ItemArray = new object[] {
                        Note,
                        FileName,
                        Data,
                        refParentRecordEntityId,
                        parentMailRowByMailAttachment[8],
                        RecordUpdated,
                        RecordCreatedServer,
                        Id,
                        RecordUpdatedServer,
                        RecordCreatedBy,
                        RecordCreated,
                        RecordUpdatedBy};
                this.Rows.Add(rowMailAttachmentRow);
                return rowMailAttachmentRow;
            }
            
            public MailAttachmentRow FindById(System.Guid Id) {
                return ((MailAttachmentRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MailAttachmentDataTable cln = ((MailAttachmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MailAttachmentDataTable();
            }
            
            internal void InitVars() {
                this.columnNote = this.Columns["Note"];
                this.columnFileName = this.Columns["FileName"];
                this.columnData = this.Columns["Data"];
                this.columnrefParentRecordEntityId = this.Columns["refParentRecordEntityId"];
                this.columnrefParentRecordId = this.Columns["refParentRecordId"];
                this.columnRecordUpdated = this.Columns["RecordUpdated"];
                this.columnRecordCreatedServer = this.Columns["RecordCreatedServer"];
                this.columnId = this.Columns["Id"];
                this.columnRecordUpdatedServer = this.Columns["RecordUpdatedServer"];
                this.columnRecordCreatedBy = this.Columns["RecordCreatedBy"];
                this.columnRecordCreated = this.Columns["RecordCreated"];
                this.columnRecordUpdatedBy = this.Columns["RecordUpdatedBy"];
            }
            
            private void InitClass() {
                this.columnNote = new DataColumn("Note", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNote);
                this.columnFileName = new DataColumn("FileName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileName);
                this.columnData = new DataColumn("Data", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnData);
                this.columnrefParentRecordEntityId = new DataColumn("refParentRecordEntityId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrefParentRecordEntityId);
                this.columnrefParentRecordId = new DataColumn("refParentRecordId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrefParentRecordId);
                this.columnRecordUpdated = new DataColumn("RecordUpdated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordUpdated);
                this.columnRecordCreatedServer = new DataColumn("RecordCreatedServer", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordCreatedServer);
                this.columnId = new DataColumn("Id", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnRecordUpdatedServer = new DataColumn("RecordUpdatedServer", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordUpdatedServer);
                this.columnRecordCreatedBy = new DataColumn("RecordCreatedBy", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordCreatedBy);
                this.columnRecordCreated = new DataColumn("RecordCreated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordCreated);
                this.columnRecordUpdatedBy = new DataColumn("RecordUpdatedBy", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRecordUpdatedBy);
                this.Constraints.Add(new UniqueConstraint("PK_Id", new DataColumn[] {
                                this.columnId}, true));
                this.columnNote.Caption = "Poznámka";
                this.columnNote.MaxLength = 3900;
                this.columnFileName.Caption = "Název souboru";
                this.columnFileName.MaxLength = 3900;
                this.columnrefParentRecordId.AllowDBNull = false;
                this.columnRecordUpdated.Caption = "Záznam aktualizován";
                this.columnRecordCreatedServer.Caption = "Záznam vytvořen (server)";
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
                this.columnRecordUpdatedServer.Caption = "Záznam aktualizován (server)";
                this.columnRecordCreatedBy.Caption = "Záznam vytvořil";
                this.columnRecordCreated.Caption = "Záznam vytvořen";
                this.columnRecordUpdatedBy.Caption = "Záznam aktualizoval";
                this.Locale = new System.Globalization.CultureInfo("cs-CZ");
                this.Namespace = "";
                this.DisplayExpression = "\'MailAttachment\'";
            }
            
            public MailAttachmentRow NewMailAttachmentRow() {
                return ((MailAttachmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MailAttachmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MailAttachmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailAttachmentRowChanged != null)) {
                    this.MailAttachmentRowChanged(this, new MailAttachmentRowChangeEvent(((MailAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailAttachmentRowChanging != null)) {
                    this.MailAttachmentRowChanging(this, new MailAttachmentRowChangeEvent(((MailAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailAttachmentRowDeleted != null)) {
                    this.MailAttachmentRowDeleted(this, new MailAttachmentRowChangeEvent(((MailAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailAttachmentRowDeleting != null)) {
                    this.MailAttachmentRowDeleting(this, new MailAttachmentRowChangeEvent(((MailAttachmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMailAttachmentRow(MailAttachmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailAttachmentRow : DataRow {
            
            private MailAttachmentDataTable tableMailAttachment;
            
            internal MailAttachmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailAttachment = ((MailAttachmentDataTable)(this.Table));
            }
            
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableMailAttachment.NoteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.NoteColumn] = value;
                }
            }
            
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableMailAttachment.FileNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.FileNameColumn] = value;
                }
            }
            
            public System.Byte[] Data {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableMailAttachment.DataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.DataColumn] = value;
                }
            }
            
            public System.Guid refParentRecordEntityId {
                get {
                    try {
                        return ((System.Guid)(this[this.tableMailAttachment.refParentRecordEntityIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.refParentRecordEntityIdColumn] = value;
                }
            }
            
            public System.Guid refParentRecordId {
                get {
                    return ((System.Guid)(this[this.tableMailAttachment.refParentRecordIdColumn]));
                }
                set {
                    this[this.tableMailAttachment.refParentRecordIdColumn] = value;
                }
            }
            
            public System.DateTime RecordUpdated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMailAttachment.RecordUpdatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.RecordUpdatedColumn] = value;
                }
            }
            
            public System.DateTime RecordCreatedServer {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMailAttachment.RecordCreatedServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.RecordCreatedServerColumn] = value;
                }
            }
            
            public System.Guid Id {
                get {
                    return ((System.Guid)(this[this.tableMailAttachment.IdColumn]));
                }
                set {
                    this[this.tableMailAttachment.IdColumn] = value;
                }
            }
            
            public System.DateTime RecordUpdatedServer {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMailAttachment.RecordUpdatedServerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.RecordUpdatedServerColumn] = value;
                }
            }
            
            public System.Guid RecordCreatedBy {
                get {
                    try {
                        return ((System.Guid)(this[this.tableMailAttachment.RecordCreatedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.RecordCreatedByColumn] = value;
                }
            }
            
            public System.DateTime RecordCreated {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMailAttachment.RecordCreatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.RecordCreatedColumn] = value;
                }
            }
            
            public System.Guid RecordUpdatedBy {
                get {
                    try {
                        return ((System.Guid)(this[this.tableMailAttachment.RecordUpdatedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailAttachment.RecordUpdatedByColumn] = value;
                }
            }
            
            public MailRow MailRow {
                get {
                    return ((MailRow)(this.GetParentRow(this.Table.ParentRelations["MailAttachment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MailAttachment"]);
                }
            }
            
            public bool IsNoteNull() {
                return this.IsNull(this.tableMailAttachment.NoteColumn);
            }
            
            public void SetNoteNull() {
                this[this.tableMailAttachment.NoteColumn] = System.Convert.DBNull;
            }
            
            public bool IsFileNameNull() {
                return this.IsNull(this.tableMailAttachment.FileNameColumn);
            }
            
            public void SetFileNameNull() {
                this[this.tableMailAttachment.FileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDataNull() {
                return this.IsNull(this.tableMailAttachment.DataColumn);
            }
            
            public void SetDataNull() {
                this[this.tableMailAttachment.DataColumn] = System.Convert.DBNull;
            }
            
            public bool IsrefParentRecordEntityIdNull() {
                return this.IsNull(this.tableMailAttachment.refParentRecordEntityIdColumn);
            }
            
            public void SetrefParentRecordEntityIdNull() {
                this[this.tableMailAttachment.refParentRecordEntityIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordUpdatedNull() {
                return this.IsNull(this.tableMailAttachment.RecordUpdatedColumn);
            }
            
            public void SetRecordUpdatedNull() {
                this[this.tableMailAttachment.RecordUpdatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordCreatedServerNull() {
                return this.IsNull(this.tableMailAttachment.RecordCreatedServerColumn);
            }
            
            public void SetRecordCreatedServerNull() {
                this[this.tableMailAttachment.RecordCreatedServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordUpdatedServerNull() {
                return this.IsNull(this.tableMailAttachment.RecordUpdatedServerColumn);
            }
            
            public void SetRecordUpdatedServerNull() {
                this[this.tableMailAttachment.RecordUpdatedServerColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordCreatedByNull() {
                return this.IsNull(this.tableMailAttachment.RecordCreatedByColumn);
            }
            
            public void SetRecordCreatedByNull() {
                this[this.tableMailAttachment.RecordCreatedByColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordCreatedNull() {
                return this.IsNull(this.tableMailAttachment.RecordCreatedColumn);
            }
            
            public void SetRecordCreatedNull() {
                this[this.tableMailAttachment.RecordCreatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecordUpdatedByNull() {
                return this.IsNull(this.tableMailAttachment.RecordUpdatedByColumn);
            }
            
            public void SetRecordUpdatedByNull() {
                this[this.tableMailAttachment.RecordUpdatedByColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailAttachmentRowChangeEvent : EventArgs {
            
            private MailAttachmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public MailAttachmentRowChangeEvent(MailAttachmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MailAttachmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
